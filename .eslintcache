[{"/Users/prmph/Code/Agyemanjp/passport-heroku/lib/index.ts":"1","/Users/prmph/Code/Agyemanjp/passport-heroku/lib/profile.ts":"2","/Users/prmph/Code/Agyemanjp/passport-heroku/lib/strategy.ts":"3"},{"size":116,"mtime":1662294858700,"results":"4","hashOfConfig":"5"},{"size":979,"mtime":1662292148487,"results":"6","hashOfConfig":"5"},{"size":3674,"mtime":1662292496907,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9lp5nw",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/prmph/Code/Agyemanjp/passport-heroku/lib/index.ts",[],[],"/Users/prmph/Code/Agyemanjp/passport-heroku/lib/profile.ts",["19","20","21"],["22"],"/* eslint-disable camelcase */\n/** Parse profile. */\nexport function parse(json: { id: string, name: string, email: string } & Profile[\"heroku\"]) {\n\tif ('string' == typeof json) {\n\t\tjson = JSON.parse(json)\n\t}\n\n\tconst profile = {} as Profile\n\t// Normalized profile bits\n\tprofile.id = String(json.id)\n\tprofile.displayName = json.name\n\tif (json.email) {\n\t\tprofile.emails = [{ value: json.email }]\n\t}\n\t// Heroku-specific profile bits\n\tprofile.heroku = {\n\t\tbeta: json.beta,\n\t\tverified: json.verified,\n\t}\n\n\tif (json.default_organization) {\n\t\tprofile.heroku.default_organization = json.default_organization\n\t}\n\n\treturn profile\n}\n\nexport type Profile = {\n\tprovider: `heroku`;\n\n\t/** the user's Heroku ID */\n\tid: string;\n\n\t/** the user's full name */\n\tdisplayName: string;\n\n\t/** the user's email addresses */\n\temails: { value: string }[];\n\n\t/** Heroku-specific fields */\n\theroku: {\n\t\tbeta: any;\n\t\tverified: any;\n\t\tdefault_organization?: string\n\t};\n\n\t_raw?: string | Buffer;\n\t_json: any;\n}\n","/Users/prmph/Code/Agyemanjp/passport-heroku/lib/strategy.ts",["23","24","25","26"],[],"import { default as OAuth2Strategy, StrategyOptions, VerifyFunction, InternalOAuthError } from 'passport-oauth2'\nimport { parse, Profile } from './profile'\n\n\n/** `Strategy` constructor.\n *\n * The Heroku authentication strategy authenticates requests by delegating to Heroku using the OAuth 2.0 protocol.\n *\n * Applications must supply a `verify` callback which accepts an `accessToken`,\n * `refreshToken` and service-specific `profile`, and then calls the `done`\n * callback supplying a `user`, which should be set to `false` if the\n * credentials are not valid.  If an exception occured, `err` should be set.\n *\n * Options:\n *   - `clientID`      your Heroku application's Client ID\n *   - `clientSecret`  your Heroku application's Client Secret\n *   - `callbackURL`   URL to which Heroku will redirect the user after granting authorization\n *   - `scope`         array of permission scopes to request.  valid scopes include:\n *                     'global', 'identity', 'read', 'write', 'read-protected', 'write-protected', or none.\n *                     (see https://devcenter.heroku.com/articles/oauth#scopes for more info)\n *\n * Examples:\n *\n *     passport.use(new HerokuStrategy({\n *         clientID: '123-456-789',\n *         clientSecret: 'shhh-its-a-secret'\n *         callbackURL: 'https://www.example.net/auth/github/callback',\n *         userAgent: 'myapp.com'\n *       },\n *       function(accessToken, refreshToken, profile, done) {\n *         User.findOrCreate(..., function (err, user) {\n *           done(err, user);\n *         });\n *       }\n *     ));\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nexport class Strategy extends OAuth2Strategy {\n\tprivate _userProfileURL: string\n\n\tconstructor(options: StrategyOptions & { userAgent?: string; userProfileURL?: string }, verify: VerifyFunction) {\n\t\toptions = options || {}\n\t\toptions.authorizationURL = options.authorizationURL || 'https://id.heroku.com/oauth/authorize'\n\t\toptions.tokenURL = options.tokenURL || 'https://id.heroku.com/oauth/token'\n\t\toptions.scopeSeparator = options.scopeSeparator || ','\n\t\toptions.customHeaders = options.customHeaders || {}\n\n\t\tif (!options.customHeaders['User-Agent']) {\n\t\t\toptions.customHeaders['User-Agent'] = options.userAgent || 'passport-heroku'\n\t\t}\n\t\tif (!options.customHeaders['Accept']) {\n\t\t\toptions.customHeaders['Accept'] = \"application/vnd.heroku+json; version=3\"\n\t\t}\n\n\t\tsuper(options, verify)\n\n\t\tthis.name = 'heroku'\n\t\tthis._userProfileURL = options.userProfileURL || 'https://api.heroku.com/account'\n\t\tthis._oauth2.useAuthorizationHeaderforGET(true)\n\t}\n\n\t// /** Inherit from `OAuth2Strategy`. */\n\t// util.inherits(Strategy, OAuth2Strategy);\n\n\n\t/** Retrieve user profile from Heroku and return it as a normalized profile */\n\tpublic userProfile(accessToken: string, done: (err: Error | null, result?: Profile) => void) {\n\t\tthis._oauth2.get(this._userProfileURL, accessToken, function (err, body, res) {\n\t\t\tlet json = undefined as undefined | ArgsType<typeof parse>[0]\n\n\t\t\tif (err) {\n\t\t\t\treturn done(new InternalOAuthError('Failed to fetch user profile', err))\n\t\t\t}\n\n\t\t\tif (!body) {\n\t\t\t\treturn done(new Error('User profile fetch response empty', err))\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tjson = JSON.parse(body.toString())\n\t\t\t\tif (!json) {\n\t\t\t\t\treturn done(new Error('Could not parse user profile JSON', err))\n\t\t\t\t}\n\n\t\t\t\tconst profile = parse(json)\n\t\t\t\tprofile.provider = 'heroku'\n\t\t\t\tprofile._raw = body\n\t\t\t\tprofile._json = json\n\n\t\t\t\tdone(null, profile)\n\t\t\t}\n\t\t\tcatch (ex) {\n\t\t\t\treturn done(new Error('Failed to parse user profile'))\n\t\t\t}\n\t\t})\n\t}\n\n}\n\n\n\ntype ArgsType<F extends (...x: any[]) => any> = F extends (...x: infer A) => any ? A : never\n",{"ruleId":"27","severity":1,"message":"28","line":42,"column":9,"nodeType":"29","messageId":"30","endLine":42,"endColumn":12,"suggestions":"31"},{"ruleId":"27","severity":1,"message":"28","line":43,"column":13,"nodeType":"29","messageId":"30","endLine":43,"endColumn":16,"suggestions":"32"},{"ruleId":"27","severity":1,"message":"28","line":48,"column":9,"nodeType":"29","messageId":"30","endLine":48,"endColumn":12,"suggestions":"33"},{"ruleId":"34","severity":2,"message":"35","line":22,"column":18,"nodeType":"36","messageId":"37","endLine":22,"endColumn":38,"suppressions":"38"},{"ruleId":"39","severity":1,"message":"40","line":71,"column":76,"nodeType":"36","messageId":"41","endLine":71,"endColumn":79},{"ruleId":"27","severity":1,"message":"28","line":105,"column":32,"nodeType":"29","messageId":"30","endLine":105,"endColumn":35,"suggestions":"42"},{"ruleId":"27","severity":1,"message":"28","line":105,"column":42,"nodeType":"29","messageId":"30","endLine":105,"endColumn":45,"suggestions":"43"},{"ruleId":"27","severity":1,"message":"28","line":105,"column":78,"nodeType":"29","messageId":"30","endLine":105,"endColumn":81,"suggestions":"44"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["45","46"],["47","48"],["49","50"],"camelcase","Identifier 'default_organization' is not in camel case.","Identifier","notCamelCase",["51"],"@typescript-eslint/no-unused-vars","'res' is defined but never used.","unusedVar",["52","53"],["54","55"],["56","57"],{"messageId":"58","fix":"59","desc":"60"},{"messageId":"61","fix":"62","desc":"63"},{"messageId":"58","fix":"64","desc":"60"},{"messageId":"61","fix":"65","desc":"63"},{"messageId":"58","fix":"66","desc":"60"},{"messageId":"61","fix":"67","desc":"63"},{"kind":"68","justification":"69"},{"messageId":"58","fix":"70","desc":"60"},{"messageId":"61","fix":"71","desc":"63"},{"messageId":"58","fix":"72","desc":"60"},{"messageId":"61","fix":"73","desc":"63"},{"messageId":"58","fix":"74","desc":"60"},{"messageId":"61","fix":"75","desc":"63"},"suggestUnknown",{"range":"76","text":"77"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"76","text":"78"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"79","text":"77"},{"range":"79","text":"78"},{"range":"80","text":"77"},{"range":"80","text":"78"},"directive","",{"range":"81","text":"77"},{"range":"81","text":"78"},{"range":"82","text":"77"},{"range":"82","text":"78"},{"range":"83","text":"77"},{"range":"83","text":"78"},[880,883],"unknown","never",[897,900],[972,975],[3612,3615],[3622,3625],[3658,3661]]